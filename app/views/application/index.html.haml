#index_page
  #search_container
    .directions
      %span.content What kind of food do you want?
      %span.example (ie. pizza)
    #category_box
      = form_tag instant_restaurants_url, :remote => :true, :method => :get, :id => 'instant_search' do
        = text_field_tag :q, params[:q], :class => 'field', :id => 'category_field'
        #search_radio
          = radio_button_tag :search_type, 'best', true
          = label_tag 'Best'
          = radio_button_tag :search_type, 'nearest'
          = label_tag 'Nearest'
        = hidden_field_tag :category
        = hidden_field_tag :bounds
        = hidden_field_tag :center
        = hidden_field_tag :location_id, @location.id
    .clear
    .col_spacer
    .directions
      %span.content Mark an address!
    #address_box
      = form_tag '', :id => 'address_autocomplete' do
        = text_field_tag :q, params[:q], :class => 'field', :id => 'address_field'
      -#
        %button#mark_button.ui-button.ui-button-text-only.ui-widget.ui-state-default.ui-corner-all
          %span.ui-button-text Mark
        %input#mark_button.ui-button.ui-widget.ui-state-default.ui-corner-all{:type => 'submit', :value => 'Mark'}
        %input#center_button.ui-button.ui-widget.ui-state-default.ui-corner-all{:type => 'submit', :value => 'Center'}
        %input#clear_button.ui-button.ui-widget.ui-state-default.ui-corner-all{:type => 'submit', :value => 'Clear'}
      .clear
      %div{:style => 'margin-top: 5px'}
        %input#mark_button{:type => 'submit', :value => 'Mark'}
        %input#center_button{:type => 'submit', :value => 'Center Map'}
        %input#clear_button{:type => 'submit', :value => 'Clear'}

    #instructions
      %h2 Instructions
      %ol
        %li Enter what food you want
        %li Place a marker at any address
        %li Scroll the map to discover restaurants
        %li Have fun!
  #map_container
    #locations
      = link_to 'San Francisco', location_url(:id => 1), :remote => true
      &nbsp;-&nbsp;
      = link_to 'Mountain View', location_url(:id => 2), :remote => true
      &nbsp;-&nbsp;
      = link_to 'Washington DC', location_url(:id => 3), :remote => true
    #map_canvas
      = image_tag 'loading.gif', :style => 'margin-top: 200px'
    #restaurant_info

= javascript_include_tag 'http://maps.google.com/maps/api/js?sensor=false'
= javascript_include_tag 'loader.js'
:javascript
  var map;
  var geocoder;

  var best = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter_withshadow&chld=%E2%80%A2|33CC33|000000';
  var better = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter_withshadow&chld=%E2%80%A2|FFFF00|000000';
  var good = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter_withshadow&chld=%E2%80%A2|FF6633|000000';

  var last_checked = (new Date()).getTime();
  var current_category;
  var categories = #{@categories};
  var cur_location = { city: "#{@location.city}", state: "#{@location.state}" };
  var selected_address;
  var addresses = {};
  var gresults;

  $(document).ready(function() {
    var latlng = new google.maps.LatLng(#{@location.x_center}, #{@location.y_center});
    map = new google.maps.Map(document.getElementById("map_canvas"), {
      zoom: #{@location.zoom_level},
      center: latlng,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    // map.addCrosshairs();
    geocoder = new google.maps.Geocoder();

    var requestData = function() {
      b = map.getBounds();
      c = map.getCenter();
      $("input#bounds").val(JSON.stringify({ x: [b.S.b, b.S.c], y: [b.L.c, b.L.b] }));
      $("input#center").val(JSON.stringify([c.ra, c.sa]));
      $("#instant_search").submit();
    }

    google.maps.event.addListener(map, 'bounds_changed', function() {
      d = (new Date()).getTime();
      if (d - last_checked > 750) {
        last_checked = d;
        requestData();
      }
    });

    $("#category_field").autocomplete({
      delay: 0,
      source: function(req, responseFn) {
        var re = $.ui.autocomplete.escapeRegex(req.term);
        var matcher = new RegExp("^" + re, "i");
        var results = $.grep(categories, function(item, index) {
          return matcher.test(item);
        });
        if (results[0] && current_category != results[0]) {
          current_category = results[0];
          $("input#category").val(current_category);
          requestData();
        }
        responseFn(results);
      },
      select: function(value, data) {
        current_category = data.item.value;
        $("input#category").val(current_category);
        requestData();
      }
    });
    $("#address_field").autocomplete({
      delay: 0,
      source: function(req, responseFn) {
        var address = req.term + ' ' + cur_location.city + ', ' + cur_location.state;
        geocoder.geocode({ 'address': address }, function(results, status) {
          gresults = results;
          var formatted_results = [];
          var new_addresses = {};
          $.each(results, function(index, value) {
            var a = '';
            var result = value;
            addresses[result.formatted_address.toLowerCase()] = new google.maps.LatLng(result.geometry.location.sa, result.geometry.location.ta);
            new_addresses[result.formatted_address] = '';
            /*
            $.each(value.address_components, function(index, value) {
              var long_name = value.long_name;
              var types = value.types;
              $.each(['point_of_interest', 'establishment', 'route', 'street_number'], function(index, value) {
                if ($.inArray(value, types) == 0) {
                  if (a != '') {
                    a += ' ';
                  }
                  if (value == 'point_of_interest' || value == 'establishment') {
                    a += long_name + ' @';
                  } else {
                    a += long_name;
                  }
                }
              });
            });
            if (a != '') {
              addresses[a.toLowerCase()] = new google.maps.LatLng(result.geometry.location.ra, result.geometry.location.sa);
              new_addresses[a] = '';
            }
            */
          });
          for (key in new_addresses) {
            formatted_results.push(key);
          }
          selected_address = formatted_results[0];
          /*
          var re = $.ui.autocomplete.escapeRegex(cur_location.city);
          var matcher = new RegExp(re, "i");
          formatted_results = $.grep(formatted_results, function(item, index) {
            return matcher.test(item);
          });
          */
          responseFn(formatted_results);
        });
      },
      select: function(value, data) {
        selected_address = data.item.value;
      }
    });

    $("input:radio[name=search_type]").change(function() {
      requestData();
    });

    $("#mark_button").click(function() {
      if (map.address_marker) {
        map.address_marker.setMap(null);
      }
      map.address_marker = new google.maps.Marker({
        position: addresses[selected_address.toLowerCase()],
        map: map,
        title: selected_address
      });
      map.address_marker.setMap(map);
    });
    $("#center_button").click(function() {
      map.setCenter(map.address_marker.position);
    });
    $("#clear_button").click(function() {
      if (map.address_marker) {
        map.address_marker.setMap(null);
      }
    });
  });
